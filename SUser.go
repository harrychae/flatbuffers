// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AniLand

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SUser struct {
	_tab flatbuffers.Table
}

func GetRootAsSUser(buf []byte, offset flatbuffers.UOffsetT) *SUser {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SUser{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SUser) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SUser) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SUser) Uidx() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SUser) MutateUidx(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *SUser) Uid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SUser) Pos(obj *Vec3) *Vec3 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Vec3)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SUserStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SUserAddUidx(builder *flatbuffers.Builder, uidx uint64) {
	builder.PrependUint64Slot(0, uidx, 0)
}
func SUserAddUid(builder *flatbuffers.Builder, uid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(uid), 0)
}
func SUserAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(pos), 0)
}
func SUserEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
