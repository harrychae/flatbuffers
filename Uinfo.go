// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package AniLand

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Uinfo struct {
	_tab flatbuffers.Table
}

func GetRootAsUinfo(buf []byte, offset flatbuffers.UOffsetT) *Uinfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Uinfo{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Uinfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Uinfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Uinfo) NickStr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Uinfo) Uidx() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Uinfo) MutateUidx(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Uinfo) Parts(obj *Item, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 8
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Uinfo) PartsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func UinfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func UinfoAddNickStr(builder *flatbuffers.Builder, nickStr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(nickStr), 0)
}
func UinfoAddUidx(builder *flatbuffers.Builder, uidx uint64) {
	builder.PrependUint64Slot(1, uidx, 0)
}
func UinfoAddParts(builder *flatbuffers.Builder, parts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(parts), 0)
}
func UinfoStartPartsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 4)
}
func UinfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
